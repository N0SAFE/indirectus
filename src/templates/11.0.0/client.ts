import { MultiLineGenerator } from "@/lib/templating/generator/struct/arrangement.generator";
import { CommentGenerator } from "@/lib/templating/generator/ts/comment.generator";
import { FileGenerator } from "@/lib/templating/generator/struct/file.generator";
import { IdentifierGenerator } from "@/lib/templating/generator/struct/identifier.generate";
import { ImportGenerator } from "@/lib/templating/generator/ts/import.generator";
import { NunjucksBlockGenerator } from "@/lib/templating/generator/nunjucks/block.generator";
import {
    NunjucksConditionGenerator,
    NunjucksIfConditionGenerator,
} from "@/lib/templating/generator/nunjucks/condition.generator";
import { NunjucksRendererGenerator } from "@/lib/templating/generator/nunjucks/renderer.generator";
import { Registry } from "@/types/registry";
import { TemplateContext, TemplateRenderer } from "@/types/template";
import { ExportGenerator } from "@/lib/templating/generator/ts/export.generator";
import {
    InterfaceDeclaratorGenerator,
    NamespaceDeclaratorGenerator,
    TypeDeclaratorGenerator,
} from "@/lib/templating/generator/type/declarator.generator";
import { LoopGenerator } from "@/lib/templating/generator/logic/loop.generator";
import {
    only_custom_fields,
    to_collection_name,
    to_collection_string,
    to_collection_text,
    to_ts_type,
} from "@/extensions/filters/directus";
import { to_ts_identifier } from "@/extensions/filters/typescript";
import { wrapInBraces } from "@/lib/templating/generator/utils";
import {
    GenericsTypeGenerator,
    GenericTypeGenerator,
} from "@/lib/templating/generator/type/generic.generator";
import { pluralize, singularize } from "@/extensions/filters/inflections";
import { VariableDeclaratorGenerator } from "@/lib/templating/generator/ts/declarator.generator";
import { ObjectTypeGenerator } from "@/lib/templating/generator/type/object.generator";

export default (
    registry: Registry,
    {
        renderer,
        ctx,
    }: {
        renderer: TemplateRenderer;
        ctx: TemplateContext;
    },
) =>
    IdentifierGenerator.create(
        `Client`,
        NunjucksRendererGenerator.create(
            FileGenerator.create([
                IdentifierGenerator.create(
                    `header`,
                    NunjucksBlockGenerator.create(
                        "header",
                        MultiLineGenerator.create([
                            CommentGenerator.create([
                                "This file is automatically generated by the `@indirectus/cli` package.",
                                "Follow the package's instruction to update this file with the latest schema.",
                            ]),
                        ]),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.imports`,
                    NunjucksBlockGenerator.create(
                        "imports",
                        MultiLineGenerator.create([
                            ImportGenerator.create("@directus/sdk", {
                                type: true,
                                all: true,
                                as: "Directus",
                            }),
                            ImportGenerator.create("@directus/sdk", {
                                all: true,
                                as: "DirectusSDK",
                            }),
                            ImportGenerator.create(
                                "./bindings/system-binding/index",
                                {
                                    all: true,
                                    as: "SystemBinding",
                                },
                            ),
                            NunjucksConditionGenerator.create({
                                if: NunjucksIfConditionGenerator.create(
                                    "registry.collections | has_non_system_collections",
                                    ImportGenerator.create(
                                        "./bindings/item-binding/index",
                                        {
                                            all: true,
                                            as: "ItemBinding",
                                        },
                                    ),
                                ),
                            }),
                        ]),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.Types`,
                    NunjucksBlockGenerator.create(
                        "Types",
                        NamespaceDeclaratorGenerator.create({
                            name: "Types",
                            content: [
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Internal"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.Internal`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Nullable<T>",
                                                    content: "T | null",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Optional<T>",
                                                    content: "Nullable<T>",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "UnknownType<T>",
                                                    content: "T | unknown",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "PrimaryKey<T>",
                                                    content: "T",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Numbers"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.Numbers`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "BigInteger",
                                                    content: "number",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Decimal",
                                                    content: "number",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Float",
                                                    content: "number",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Integer",
                                                    content: "number",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Number",
                                                    content: "number",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Buffers"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.Buffers`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Binary",
                                                    content: "string",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "String",
                                                    content: "string",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Text",
                                                    content: "string",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Date & Time"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.DateAndTime`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Date",
                                                    content: "'datetime'",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "DateTime",
                                                    content: "'datetime'",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Geometry"]),
                                    MultiLineGenerator.create([
                                        ExportGenerator.create(
                                            NamespaceDeclaratorGenerator.create(
                                                {
                                                    name: "Geometry",
                                                    content: [
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "LineString",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "MultiLineString",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "MultiPoint",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "MultiPolygon",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "Point",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                        ExportGenerator.create(
                                                            TypeDeclaratorGenerator.create(
                                                                {
                                                                    name: "Polygon",
                                                                    content:
                                                                        "any",
                                                                },
                                                            ),
                                                        ),
                                                    ],
                                                },
                                            ),
                                        ),
                                    ]),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Complex"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.Complex`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "JSON",
                                                    content: "any",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "JSONSchema",
                                                    content: "any",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                                MultiLineGenerator.create([
                                    CommentGenerator.create(["Others"]),
                                    IdentifierGenerator.create(
                                        `Client.Types.Others`,
                                        MultiLineGenerator.create([
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "UUID",
                                                    content: "string",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Boolean",
                                                    content: "boolean",
                                                }),
                                            ),
                                            ExportGenerator.create(
                                                TypeDeclaratorGenerator.create({
                                                    name: "Enum",
                                                    content: "string",
                                                }),
                                            ),
                                        ]),
                                    ),
                                ]),
                            ],
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.Collections`,
                    ExportGenerator.create(
                        NamespaceDeclaratorGenerator.create({
                            name: "Collections",
                            content: registry.collections.map((collection) =>
                                collection.is_system
                                    ? ExportGenerator.create(
                                          TypeDeclaratorGenerator.create({
                                              name: to_collection_name(
                                                  ctx,
                                                  collection.name.raw,
                                              ),
                                              content: `Directus.${to_collection_name(ctx, collection.name.raw)}<Schema>`,
                                          }),
                                      )
                                    : ExportGenerator.create(
                                          InterfaceDeclaratorGenerator.create({
                                              name: collection.name.pascal,
                                              content: Object.fromEntries(
                                                  collection.fields.map(
                                                      (field) => [
                                                          to_ts_identifier(
                                                              ctx,
                                                              field.name.raw,
                                                          ),
                                                          to_ts_type(
                                                              ctx,
                                                              field,
                                                          ),
                                                      ],
                                                  ),
                                              ),
                                          }),
                                      ),
                            ),
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.CollectionsType`,
                    ExportGenerator.create(
                        NamespaceDeclaratorGenerator.create({
                            name: "CollectionsType",
                            content: registry.collections.map((collection) =>
                                ExportGenerator.create(
                                    TypeDeclaratorGenerator.create({
                                        name: collection.name.pascal,
                                        content: `Collections.${to_collection_name(ctx, collection.name.raw)}${collection.is_singleton ? "" : "[]"}`,
                                    }),
                                ),
                            ),
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.System`,
                    ExportGenerator.create(
                        InterfaceDeclaratorGenerator.create({
                            name: "System",
                            content: Object.fromEntries(
                                registry.collections.map((collection) =>
                                    collection.is_system
                                        ? [
                                              collection.name.raw,
                                              `${wrapInBraces(
                                                  only_custom_fields(
                                                      ctx,
                                                      collection.fields,
                                                  )
                                                      .map((field) => {
                                                          console.log({
                                                              field,
                                                              ts_ts_type:
                                                                  to_ts_type(
                                                                      ctx,
                                                                      field,
                                                                  ),
                                                          });
                                                          return field;
                                                      })
                                                      .filter(
                                                          (field) =>
                                                              to_ts_type(
                                                                  ctx,
                                                                  field,
                                                              ) !== "never",
                                                      )
                                                      .map(
                                                          (field) =>
                                                              `${to_ts_identifier(ctx, field.name.raw)}: ${to_ts_type(ctx, field)}`,
                                                      )
                                                      .join(","),
                                              )}${collection.is_singleton ? "" : "[]"}`,
                                          ]
                                        : [],
                                ),
                            ),
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.Schema`,
                    ExportGenerator.create(
                        InterfaceDeclaratorGenerator.create({
                            name: "Schema",
                            content: Object.fromEntries(
                                registry.collections.map((collection) =>
                                    !collection.is_system
                                        ? [
                                              collection.name.raw,
                                              `Collections.${collection.name.pascal}${collection.is_singleton ? "" : "[]"}`,
                                          ]
                                        : [],
                                ),
                            ),
                            extend: "System",
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.DirectusRestCommands`,
                    ExportGenerator.create(
                        TypeDeclaratorGenerator.create({
                            name: "DirectusRestCommands",
                            generics: GenericsTypeGenerator.create([
                                GenericTypeGenerator.create({
                                    name: "T",
                                    extends:
                                        "Record<string | number | symbol, unknown>",
                                }),
                            ]),
                            content: `keyof { [K in keyof T as T[K] extends (...args: unknown[]) => Directus.RestCommand<unknown, unknown> ? K : never]: K; }`,
                        }),
                    ),
                ),
                IdentifierGenerator.create(
                    `Client.TypedClient`,
                    ExportGenerator.create(
                        MultiLineGenerator.create([
                            TypeDeclaratorGenerator.create({
                                name: "TypedClient",
                                content: ObjectTypeGenerator.create(
                                    registry.collections // ! this type does not work in the TypeDeclarator generator because it as to be cast as a string but with the cast as a string we cannot use the getChildrenByIdentifier function so we add to create a custom generator to handle the object type but for the typescript type system and not the js system
                                        .filter(
                                            (collection) =>
                                                !collection.is_system,
                                        )
                                        .reduce(
                                            (acc, collection) => {
                                                const collectionName =
                                                    to_collection_name(
                                                        ctx,
                                                        collection.name.raw,
                                                    );
                                                const collectionNamePlural =
                                                    pluralize(
                                                        ctx,
                                                        collectionName,
                                                    );
                                                const collectionNameSingular =
                                                    singularize(
                                                        ctx,
                                                        collectionName,
                                                    );
                                                if (collection.is_system) {
                                                    if (
                                                        collection.is_singleton
                                                    ) {
                                                        // {{ collection.name | to_collection_name | to_collection_string  }}: SystemBinding.{{ collectionName }}Singleton;

                                                        acc[
                                                            `${to_collection_string(ctx, collectionName)}`
                                                        ] =
                                                            `SystemBinding.${collectionName}Singleton`;
                                                    } else {
                                                        acc[
                                                            `${to_collection_string(ctx, collectionNamePlural)}`
                                                        ] =
                                                            `SystemBinding.${collectionName}Items`;
                                                        acc[
                                                            `${to_collection_string(ctx, collectionNameSingular)}`
                                                        ] =
                                                            `SystemBinding.${collectionName}Item`;
                                                    }
                                                } else {
                                                    if (
                                                        collection.is_singleton
                                                    ) {
                                                        acc[
                                                            `${to_collection_string(ctx, collectionName)}`
                                                        ] =
                                                            `ItemBinding.${collectionName}Singleton`;
                                                    } else {
                                                        acc[
                                                            `${to_collection_string(ctx, collectionNamePlural)}`
                                                        ] =
                                                            `ItemBinding.${collectionName}Items`;
                                                        acc[
                                                            `${to_collection_string(ctx, collectionNameSingular)}`
                                                        ] =
                                                            `ItemBinding.${collectionName}Item`;
                                                    }
                                                }
                                                return acc;
                                            },
                                            {} as Record<string, string>,
                                        ),
                                ),
                            }),
                            `& { [K in keyof SystemBinding.Requests]: SystemBinding.Requests[K]; };`,
                        ]),
                    ),
                ),
                IdentifierGenerator.create(
                    "Client.ExcludedDirectusCommands",
                    MultiLineGenerator.create([
                        TypeDeclaratorGenerator.create({
                            name: "ExcludedDirectusCommands",
                            content: `"withOptions" | "withToken" | "withSearch";`,
                        }),
                        ExportGenerator.create(
                            VariableDeclaratorGenerator.create({
                                name: "excludedDirectusCommands",
                                type: `{ [K in keyof Omit<DirectusSDK, Exclude<keyof DirectusCommands, ExcludedDirectusCommands>>]: true; }`,
                                value: `{ ["auth"]: true, ["authentication"]: true, ["createDirectus"]: true, ["rest"]: true, ["formatFields"]: true, ["generateUid"]: true, ["getAuthEndpoint"]: true, ["graphql"]: true, ["memoryStorage"]: true, ["messageCallback"]: true, ["pong"]: true, ["queryToParams"]: true, ["realtime"]: true, ["sleep"]: true, ["staticToken"]: true, ["throwIfCoreCollection"]: true, ["throwIfEmpty"]: true, ["withOptions"]: true, ["withToken"]: true, ["withSearch"]: true, } as const;`,
                            }),
                        ),
                    ]),
                ),
            ]),
            renderer,
            ctx,
        ),
    );

// export type TypedClient = {
// {%- for collection in registry.collections | filter_untype_system_collections %}

// {% set collectionName = collection.name | to_collection_name %}

// {% if collection.is_system %}

// {% if not collection.is_singleton %}
//   /**
//    * Manages multiple items from the {{ collection.name.raw | to_collection_name }} collection.
//    */
//   {{ collection.name | to_collection_name | pluralize | to_collection_string  }}: SystemBinding.{{ collectionName }}Items;

//   /**
//    * Manages individual items from the {{ collection.name.raw | to_collection_name }} collection.
//    */
//   {{ collection.name | to_collection_name | singularize | to_collection_string  }}: SystemBinding.{{ collectionName }}Item;
// {% else %}

//   /**
//    * Manage the only {{ collection.name.raw | singularize | to_collection_name }} instance available.
//    */
//   {{ collection.name | to_collection_name | to_collection_string  }}: SystemBinding.{{ collectionName }}Singleton;

//   {% endif %}

// {% else %}

// {% if not collection.is_singleton %}
//   /**
//    * Manages multiple items from the {{ collection.name.raw | to_collection_name }} collection.
//    */
//   {{ collection.name | to_collection_name | pluralize | to_collection_string  }}: ItemBinding.{{ collectionName }}Items;

//   /**
//    * Manages individual items from the {{ collection.name.raw | to_collection_name }} collection.
//    */
//   {{ collection.name | to_collection_name | singularize | to_collection_string  }}: ItemBinding.{{ collectionName }}Item;
// {% else %}

//   /**
//    * Manage the only {{ collection.name.raw | singularize | to_collection_name }} instance available.
//    */
//   {{ collection.name | to_collection_name | to_collection_string  }}: ItemBinding.{{ collectionName }}Singleton;

//   {% endif %}

// {% endif %}

// {%- endfor %}

// {{ addons.TypedClient | safe }}
// } & {
//   [K in keyof SystemBinding.Requests]: SystemBinding.Requests[K];
// };

// type ExcludedDirectusCommands = "withOptions" | "withToken" | "withSearch";

// /**
//  * This is almost a sanity check for protecting against breaking changes in the SDK.
//  * If this is erroring for you, the SDK probably changed and there's an update needed.
//  */

// {# const excludedDirectusCommands: {
//   [K in keyof Omit<
//     DirectusSDK,
//     Exclude<keyof DirectusCommands, ExcludedDirectusCommands>
//   >]: true;
// } = {
//   ["auth"]: true,
//   ["authentication"]: true,
//   ["createDirectus"]: true,
//   ["rest"]: true,
//   ["formatFields"]: true,
//   ["generateUid"]: true,
//   ["getAuthEndpoint"]: true,
//   ["graphql"]: true,
//   ["memoryStorage"]: true,
//   ["messageCallback"]: true,
//   ["pong"]: true,
//   ["queryToParams"]: true,
//   ["realtime"]: true,
//   ["sleep"]: true,
//   ["staticToken"]: true,
//   ["throwIfCoreCollection"]: true,
//   ["throwIfEmpty"]: true,
//   ["withOptions"]: true,
//   ["withToken"]: true,
//   ["withSearch"]: true,
// } as const; #}

// export type _InjectSchemaSystemTypes<T, Schema>
//   = T extends Directus.Query<unknown, infer C> ? Directus.Query<Schema, C>
// {% for collection in registry.collections -%}
// {% if collection.is_system %}
//   : T extends Directus.{{ collection.name | to_collection_name }}<unknown> ? Directus.{{ collection.name | to_collection_name }}<Schema>
// {% endif %}
// {% endfor %}
//   : T extends Directus.DirectusUser<unknown> ? Directus.DirectusUser<Schema>
//   : T;

// export type InjectSchemaSystemTypes<T, Schema>
//   = T extends Partial<infer Nested> ? Partial<_InjectSchemaSystemTypes<Nested, Schema>>
//   : _InjectSchemaSystemTypes<T, Schema>
//   ;

// export type InjectSchema<T, Schema>
//   = T extends [] ? []
//   : T extends [infer Param] ? [InjectSchema<Param, Schema>]
//   : T extends [infer Param, ...infer Rest] ? [InjectSchema<Param, Schema>, ...InjectSchema<Rest, Schema>]
//   : InjectSchemaSystemTypes<T, Schema>;

// export type DirectusCommands = {
//   [K in DirectusRestCommands<DirectusSDK>]: (
//     ...args: InjectSchema<Parameters<DirectusSDK[K]>, Schema>
//   ) => Promise<
//     ReturnType<DirectusSDK[K]> extends Directus.RestCommand<infer Output, unknown>
//       ? Output
//       : unknown
//   >;
// }

// function isDirectusRestClient<Schema>(
//   client: DirectusSDK.DirectusClient<Schema>,
// ): client is DirectusSDK.DirectusClient<Schema> &
//   DirectusSDK.RestClient<Schema> {
//   return client && "request" in client;
// }

// export const schema = () => {
//   return <Schema>(client: Directus.DirectusClient<Schema>): TypedClient => {

//     if (!isDirectusRestClient(client)) {
//       throw new Error("Directus client must have the REST plugin enabled.");
//     }

//     return Object.fromEntries([
//       ...(() => {
//         const requests = new SystemBinding.Requests(client)
//         return Object.getOwnPropertyNames(Object.getPrototypeOf(requests)).map(
//           (n) => [n, typeof requests[(n as keyof SystemBinding.Requests)] === "function" ? (requests[(n as keyof SystemBinding.Requests)] as Function).bind(requests) : requests[(n as keyof SystemBinding.Requests)]],
//         );
//       })(),

// {% for collection in registry.collections | filter_untype_system_collections %}
// {% if collection.is_system %}

// {% if not collection.is_singleton %}
//       [{{ collection.name | to_collection_name | pluralize | to_collection_string }}, new SystemBinding.{{ collection.name | to_collection_name }}Items(client)],
//       [{{ collection.name | to_collection_name | singularize | to_collection_string }}, new SystemBinding.{{ collection.name | to_collection_name }}Item(client)],
// {% else %}
//       [{{ collection.name | to_collection_name | to_collection_string }}, new SystemBinding.{{ collection.name | to_collection_name }}Singleton(client)],
// {% endif %}

// {% else %}

// {% if not collection.is_singleton %}
//       [{{ collection.name | to_collection_name | pluralize | to_collection_string }}, new ItemBinding.{{ collection.name | to_collection_name }}Items(client)],
//       [{{ collection.name | to_collection_name | singularize | to_collection_string }}, new ItemBinding.{{ collection.name | to_collection_name }}Item(client)],
// {% else %}
//       [{{ collection.name | to_collection_name | to_collection_string }}, new ItemBinding.{{ collection.name | to_collection_name }}Singleton(client)],
// {% endif %}
// {% endif %}
// {% endfor %}

// {{ addons.schema | safe }}

//     ]);

//   };
// }

// export interface BindableClient {
//   with: <
//     Client extends DirectusSDK.DirectusClient<unknown>,
//     Extension extends object,
//   >(
//     createExtension: (client: Client) => Extension,
//   ) => this & Extension;
// }

// export const bindings = () => {
//   return <Schema, Client extends DirectusSDK.DirectusClient<Schema>>(
//     client: Client,
//   ): BindableClient => {
//     return {
//       with(createExtension: (client: DirectusSDK.DirectusClient<Schema>) => object) {
//         const extension = createExtension((this as unknown as Client));
//         const extensions = Object.entries(
//           extension,
//         ).reduce<PropertyDescriptorMap>((properties, [name, value]) => {
//           return {
//             ...properties,
//             [name]: {
//               value,
//               configurable: true,
//               writable: true,
//               enumerable: true,
//             },
//           };
//         }, {});

//         Object.defineProperties(this, extensions);

//         return this;
//       },
//     } as unknown as BindableClient;
//   };
// };

// export function createDirectusWithTypes(
//   url: string,
// ): Directus.DirectusClient<Schema> & Directus.RestClient<Schema> & TypedClient {
//   return DirectusSDK.createDirectus<Schema>(url)
//     .with(bindings())
//     .with(DirectusSDK.rest())
//     .with(schema());
// }

// export const createTypedClient = createDirectusWithTypes;
