import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import {
  Collections,
  Schema,
} from "../../client";
import { readDirectusRevisionItem, readDirectusRevisionItems } from "@/command/DirectusRevision.command";

export class DirectusRevisionItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusRevision
    >,
  >(
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusRevision,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[]
  > {
    return (await this.client.request(readDirectusRevisionItems(query))) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusRevision
    >,
  >(
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusRevision,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readDirectusRevisionItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
}

export class DirectusRevisionItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusRevision
    >,
  >(
    key: Collections.DirectusRevision extends { id: number | string }
      ? Collections.DirectusRevision["id"]
      : string | number,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusRevision,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      readDirectusRevisionItem(key, query),
    )) as any;
  }
}
