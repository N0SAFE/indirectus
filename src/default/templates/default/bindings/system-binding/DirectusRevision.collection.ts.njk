import type * as Directus from '@directus/sdk'

import * as DirectusSDK from '@directus/sdk'

import { ApplyQueryFields } from '../../types/ApplyQueryFields'

import {
    Collections,
    CollectionsType,
    DirectusCommands,
    Schema,
} from '../../client'

type DirectusSDK = typeof DirectusSDK


/**
 * Read many directus revisions items.
 */
export function readDirectusRevisionItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusRevision
    >,
>(query?: Query) {
    return DirectusSDK.readRevisions<CollectionsType, Query>(query)
}

/**
 * Read many directus revisions items.
 */
export const listDirectusRevision = readDirectusRevisionItems

/**
 * Gets a single known directus revisions item by id.
 */
export function readDirectusRevisionItem<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusRevision
    >,
>(
    key: Collections.DirectusRevision extends { id: number | string }
        ? Collections.DirectusRevision['id']
        : string | number,
    query?: Query
) {
    return DirectusSDK.readRevision<CollectionsType, Query>(key, query)
}

/**
 * Gets a single known directus revisions item by id.
 */
export const readDirectusRevision = readDirectusRevisionItem

export class DirectusRevisionItems {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Read many items from the collection.
     */
    async query<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusRevision
        >,
    >(
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusRevision,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            readDirectusRevisionItems(query)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Read the first item from the collection matching the query.
     */
    async find<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusRevision
        >,
    >(
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusRevision,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        const items = await this.client.request(
            readDirectusRevisionItems({
                ...query,
                limit: 1,
            })
        )
        return items?.[0] as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }
}

export class DirectusRevisionItem {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Read a single item from the collection.
     */
    async get<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusRevision
        >,
    >(
        key: Collections.DirectusRevision extends { id: number | string }
            ? Collections.DirectusRevision['id']
            : string | number,
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusRevision,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        return (await this.client.request(
            readDirectusRevisionItem(key, query)
        )) as any
    }
}