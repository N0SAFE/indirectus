import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import {
  Collections,
  Schema,
} from "../../client";
import { createDirectusFieldItem, deleteDirectusFieldItem, readDirectusFieldItem, readDirectusFieldItems, updateDirectusFieldItem } from "@/command/DirectusField.command";

type DirectusSDK = typeof DirectusSDK;

export class DirectusFieldItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusField
    >,
  >(
    query?: Query,
  ): Promise<Collections.DirectusField[]
   
  > {
    return (await this.client.request(readDirectusFieldItems())) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
}

export class DirectusFieldItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusField
    >,
  >(
    collection: keyof Schema,
    item: Partial<Collections.DirectusField>,
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusField,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >
  > {
    return (await this.client.request(
      createDirectusFieldItem(collection, item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get(
    collection: keyof Schema,
    field: Directus.DirectusField<Schema>["field"],
  ): Promise<Directus.ReadFieldOutput<Schema>> {
    return (await this.client.request(
      readDirectusFieldItem(collection, field),
    )) as any;
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusField
    >,
  >(
    key: Collections.DirectusField extends { collection: number | string }
      ? Collections.DirectusField["collection"]
      : string | number,
    field: Directus.DirectusField<Schema>["field"],
    patch: Partial<Collections.DirectusField>,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusField,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusFieldItem(key, field, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove(
    collection: Directus.DirectusField<Schema>["collection"],
    field: Directus.DirectusField<Schema>["field"],
  ): Promise<void> {
    return await this.client.request(
      deleteDirectusFieldItem(collection, field),
    );
  }
}
