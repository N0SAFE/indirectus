import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, Schema } from "../../client";
import {
  readDirectusExtensionItems,
  updateDirectusExtensionItem,
} from "@/command/DirectusExtension.command";

type DirectusSDK = typeof DirectusSDK;

export class DirectusExtensionItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query(): Promise<Collections.DirectusExtension[]> {
    return (await this.client.request(readDirectusExtensionItems())) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
}

export class DirectusExtensionItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.DirectusExtension>,
  >(
    bundle: string | null,
    name: string,
    data: Directus.NestedPartial<Directus.DirectusExtension<Schema>>,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusExtension,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusExtensionItem(bundle, name, data),
    )) as any;
  }
}
