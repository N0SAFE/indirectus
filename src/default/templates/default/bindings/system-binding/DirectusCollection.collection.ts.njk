import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, Schema } from "../../client";
import {
  createDirectusCollectionItem,
  deleteDirectusCollectionItem,
  readDirectusCollectionItem,
  readDirectusCollectionItems,
  updateBatchDirectusCollectionItems,
  updateDirectusCollectionItem,
} from "@/command/DirectusCollection.command";

type DirectusSDK = typeof DirectusSDK;

export class DirectusCollectionItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query(): Promise<Collections.DirectusCollection[]> {
    return (await this.client.request(readDirectusCollectionItems())) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  async updateBatch<
    const Query extends Directus.Query<Schema, Directus.DirectusCollection>,
  >(
    items: Directus.NestedPartial<Collections.DirectusCollection>[],
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusCollection,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[]
  > {
    return (await this.client.request(
      updateBatchDirectusCollectionItems(items, query),
    )) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
}

export class DirectusCollectionItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<Schema, Collections.DirectusCollection>,
  >(
    item: Partial<Collections.DirectusCollection>,
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusCollection,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >
  > {
    return (await this.client.request(
      createDirectusCollectionItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get(
    collection: keyof Schema,
  ): Promise<ApplyQueryFields<Schema, Collections.DirectusCollection, "*">[]> {
    return (await this.client.request(
      readDirectusCollectionItem(collection),
    )) as any;
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<Schema, Collections.DirectusCollection>,
  >(
    collection: keyof Schema,
    patch: Partial<Collections.DirectusCollection>,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusCollection,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusCollectionItem(collection, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<Schema, Collections.DirectusCollection>,
  >(collection: keyof Schema): Promise<void> {
    return await this.client.request(deleteDirectusCollectionItem(collection));
  }
}
