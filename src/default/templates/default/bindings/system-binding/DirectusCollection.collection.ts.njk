import type * as Directus from '@directus/sdk'

import * as DirectusSDK from '@directus/sdk'

import { ApplyQueryFields } from '../../types/ApplyQueryFields'

import {
    Collections,
    CollectionsType,
    DirectusCommands,
    Schema,
} from '../../client'

type DirectusSDK = typeof DirectusSDK


/**
 * Create a single directus collections item.
 */
export function createDirectusCollectionItem<
    const Query extends DirectusSDK.Query<
        CollectionsType,
        Directus.DirectusCollection<CollectionsType>
    >, // Is this a mistake? Why []?
>(item: Partial<Collections.DirectusCollection>, query?: Query) {
    return DirectusSDK.createCollection<CollectionsType, Query>(item, query)
}

/**
 * Read many directus collections items.
 */
export function readDirectusCollectionItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusCollection
    >,
>(query?: Query) {
    return DirectusSDK.readCollections<CollectionsType>()
}

/**
 * Read many directus collections items.
 */
export const listDirectusCollection = readDirectusCollectionItems

/**
 * Gets a single known directus collections item by id.
 */
export function readDirectusCollectionItem(
    key: Collections.DirectusCollection extends { collection: number | string }
        ? Collections.DirectusCollection['collection']
        : string | number
) {
    return DirectusSDK.readCollection<CollectionsType>(key)
}

/**
 * Gets a single known directus collections item by id.
 */
export const readDirectusCollection = readDirectusCollectionItem

/**
 * Gets a single known directus collections item by id.
 */
export function updateDirectusCollectionItem<
    const Query extends Directus.Query<
        CollectionsType,
        Directus.DirectusCollection<CollectionsType>
    >,
>(
    collection: keyof CollectionsType,
    patch: Partial<Collections.DirectusCollection>,
    query?: Query
) {
    return DirectusSDK.updateCollection<CollectionsType, Query>(
        collection,
        patch,
        query
    )
}

/**
 * updates many directus collections items.
 */
export function updateBatchDirectusCollectionItems<
    const Query extends Directus.Query<
        CollectionsType,
        Directus.DirectusCollection<CollectionsType>
    >,
>(
    items: Directus.NestedPartial<Collections.DirectusCollection>[],
    query?: Query
) {
    return DirectusSDK.updateCollectionsBatch<CollectionsType, Query>(
        items,
        query
    )
}

/**
 * Deletes a single known directus collections item by id.
 */
export function deleteDirectusCollectionItem(
    key: Collections.DirectusCollection extends { collection: number | string }
        ? Collections.DirectusCollection['collection']
        : string | number
) {
    return DirectusSDK.deleteCollection<CollectionsType>(key)
}
export class DirectusCollectionItems {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Read many items from the collection.
     */
    async query<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusCollection
        >,
    >(
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusCollection,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            readDirectusCollectionItems(query)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    async updateBatch<
        const Query extends Directus.Query<
            CollectionsType,
            Directus.DirectusCollection
        >,
    >(
        items: Directus.NestedPartial<Collections.DirectusCollection>[],
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusCollection,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            updateBatchDirectusCollectionItems(items, query)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Read the first item from the collection matching the query.
     */
    async find<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusCollection
        >,
    >(
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusCollection,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        const items = await this.client.request(
            readDirectusCollectionItems({
                ...query,
                limit: 1,
            })
        )
        return items?.[0] as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }
}

export class DirectusCollectionItem {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Create a single item in the collection.
     */
    async create<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusCollection
        >,
    >(
        item: Partial<Collections.DirectusCollection>,
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusCollection,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >
    > {
        return (await this.client.request(
            createDirectusCollectionItem(item, query as any)
        )) as any
    }

    /**
     * Read a single item from the collection.
     */
    async get(
        collection: keyof CollectionsType
    ): Promise<
        ApplyQueryFields<CollectionsType, Collections.DirectusCollection, '*'>[]
    > {
        return (await this.client.request(
            readDirectusCollectionItem(collection)
        )) as any
    }

    /**
     * Update a single item from the collection.
     */
    async update<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusCollection
        >,
    >(
        collection: keyof CollectionsType,
        patch: Partial<Collections.DirectusCollection>,
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusCollection,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        return (await this.client.request(
            updateDirectusCollectionItem(collection, patch, query as any)
        )) as any
    }

    /**
     * Remove many items in the collection.
     */
    async remove<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusCollection
        >,
    >(collection: keyof CollectionsType): Promise<void> {
        return await this.client.request(
            deleteDirectusCollectionItem(collection)
        )
    }
}