import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import {
  Collections,
  Schema,
} from "../../client";
import { createDirectusRelationItem, deleteDirectusRelationItem, readDirectusRelationItem, readDirectusRelationItems, updateDirectusRelationItem } from "@/command/DirectusRelation.command";

type DirectusSDK = typeof DirectusSDK;

export class DirectusRelationItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query(): Promise<Collections.DirectusRelation[]
  > {
    return (await this.client.request(readDirectusRelationItems())) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
}

export class DirectusRelationItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create(
    item: Partial<Collections.DirectusRelation>,): Promise<Collections.DirectusRelation
  > {
    return (await this.client.request(
      createDirectusRelationItem(item),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Directus.DirectusRelation<Schema>
    >,
  >(
    key: Collections.DirectusRelation extends {
      collection: number | string;
    }
      ? Collections.DirectusRelation["collection"]
      : string | number,
    field: Directus.DirectusRelation<Schema>["field"],
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusRelation,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      readDirectusRelationItem(key, field),
    )) as any;
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusRelation
    >,
  >(
    collection: Directus.DirectusRelation<Schema>["collection"],
    field: Directus.DirectusRelation<Schema>["field"],
    patch: Partial<Collections.DirectusRelation>,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusRelation,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusRelationItem(collection, field, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove(
    collection: Directus.DirectusRelation<Schema>["collection"],
    field: Directus.DirectusRelation<Schema>["field"],
  ): Promise<void> {
    return await this.client.request(
      deleteDirectusRelationItem(collection, field),
    );
  }
}
