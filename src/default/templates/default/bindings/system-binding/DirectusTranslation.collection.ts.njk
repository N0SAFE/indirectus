import type * as Directus from '@directus/sdk'

import * as DirectusSDK from '@directus/sdk'

import { ApplyQueryFields } from '../../types/ApplyQueryFields'

import {
    Collections,
    CollectionsType,
    DirectusCommands,
    Schema,
} from '../../client'

type DirectusSDK = typeof DirectusSDK


/**
 * Create many directus translations items.
 */
export function createDirectusTranslationItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(items: Partial<Collections.DirectusTranslation>[], query?: Query) {
    return DirectusSDK.createTranslations<CollectionsType, Query>(items, query)
}

/**
 * Create a single directus translations item.
 */
export function createDirectusTranslationItem<
    const Query extends DirectusSDK.Query<
        CollectionsType,
        Directus.DirectusTranslation<CollectionsType>
    >, // Is this a mistake? Why []?
>(item: Partial<Collections.DirectusTranslation>, query?: Query) {
    return DirectusSDK.createTranslation<CollectionsType, Query>(item, query)
}

/**
 * Read many directus translations items.
 */
export function readDirectusTranslationItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(query?: Query) {
    return DirectusSDK.readTranslations<CollectionsType, Query>(query)
}

/**
 * Read many directus translations items.
 */
export const listDirectusTranslation = readDirectusTranslationItems

/**
 * Gets a single known directus translations item by id.
 */
export function readDirectusTranslationItem<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(
    key: Collections.DirectusTranslation extends { id: number | string }
        ? Collections.DirectusTranslation['id']
        : string | number,
    query?: Query
) {
    return DirectusSDK.readTranslation<CollectionsType, Query>(key, query)
}

/**
 * Gets a single known directus translations item by id.
 */
export const readDirectusTranslation = readDirectusTranslationItem

/**
 * Read many directus translations items.
 */
export function updateDirectusTranslationItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(
    keys: Collections.DirectusTranslation extends { id: number | string }
        ? Collections.DirectusTranslation['id'][]
        : string[] | number[],
    patch: Partial<Collections.DirectusTranslation>,
    query?: Query
) {
    return DirectusSDK.updateTranslations<CollectionsType, Query>(
        keys,
        patch,
        query
    )
}

/**
 * Gets a single known directus translations item by id.
 */
export function updateDirectusTranslationItem<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(
    key: Collections.DirectusTranslation extends { id: number | string }
        ? Collections.DirectusTranslation['id']
        : string | number,
    patch: Partial<Collections.DirectusTranslation>,
    query?: Query
) {
    return DirectusSDK.updateTranslation<CollectionsType, Query>(
        key,
        patch,
        query
    )
}

/**
 * Deletes many directus translations items.
 */
export function deleteDirectusTranslationItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusTranslation
    >,
>(
    keys: Collections.DirectusTranslation extends { id: number | string }
        ? Collections.DirectusTranslation['id'][]
        : string[] | number[]
) {
    return DirectusSDK.deleteTranslations<CollectionsType>(keys)
}

/**
 * Deletes a single known directus translations item by id.
 */
export function deleteDirectusTranslationItem(
    key: Collections.DirectusTranslation extends { id: number | string }
        ? Collections.DirectusTranslation['id']
        : string | number
) {
    return DirectusSDK.deleteTranslation<CollectionsType>(key)
}

export class DirectusTranslationItems {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Creates many items in the collection.
     */
    async create<
        const Query extends DirectusSDK.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        items: Partial<Collections.DirectusTranslation>[],
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusTranslation,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            createDirectusTranslationItems(items, query as any)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Read many items from the collection.
     */
    async query<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusTranslation,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            readDirectusTranslationItems(query)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Read the first item from the collection matching the query.
     */
    async find<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusTranslation,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        const items = await this.client.request(
            readDirectusTranslationItems({
                ...query,
                limit: 1,
            })
        )
        return items?.[0] as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Update many items in the collection.
     */
    async update<
        const Query extends Directus.Query<
            CollectionsType,
            Directus.DirectusTranslation<CollectionsType>
        >,
    >(
        keys: Collections.DirectusTranslation extends { id: number | string }
            ? Collections.DirectusTranslation['id'][]
            : string[] | number[],
        patch: Partial<Collections.DirectusTranslation>,
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusTranslation,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[]
    > {
        return (await this.client.request(
            updateDirectusTranslationItems(keys, patch, query)
        )) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

    /**
     * Remove many items in the collection.
     */
    async remove<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        keys: Collections.DirectusTranslation extends { id: number | string }
            ? Collections.DirectusTranslation['id'][]
            : string[] | number[]
    ): Promise<void> {
        return await this.client.request(deleteDirectusTranslationItems(keys))
    }
}

export class DirectusTranslationItem {
    /**
     *
     */
    constructor(
        private client: Directus.DirectusClient<Schema> &
            Directus.RestClient<Schema>
    ) {}

    /**
     * Create a single item in the collection.
     */
    async create<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        item: Partial<Collections.DirectusTranslation>,
        query?: Query
    ): Promise<
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusTranslation,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >
    > {
        return (await this.client.request(
            createDirectusTranslationItem(item, query as any)
        )) as any
    }

    /**
     * Read a single item from the collection.
     */
    async get<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        key: Collections.DirectusTranslation extends { id: number | string }
            ? Collections.DirectusTranslation['id']
            : string | number,
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusTranslation,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        return (await this.client.request(
            readDirectusTranslationItem(key, query)
        )) as any
    }

    /**
     * Update a single item from the collection.
     */
    async update<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        key: Collections.DirectusTranslation extends { id: number | string }
            ? Collections.DirectusTranslation['id']
            : string | number,
        patch: Partial<Collections.DirectusTranslation>,
        query?: Query
    ): Promise<
        | ApplyQueryFields<
              CollectionsType,
              Collections.DirectusTranslation,
              Query extends undefined
                  ? ['*']
                  : Query['fields'] extends undefined
                    ? ['*']
                    : Query['fields'] extends Readonly<any[]>
                      ? Query['fields']
                      : ['*']
          >
        | undefined
    > {
        return (await this.client.request(
            updateDirectusTranslationItem(key, patch, query as any)
        )) as any
    }

    /**
     * Remove many items in the collection.
     */
    async remove<
        const Query extends Directus.Query<
            CollectionsType,
            Collections.DirectusTranslation
        >,
    >(
        key: Collections.DirectusTranslation extends { id: number | string }
            ? Collections.DirectusTranslation['id']
            : string | number
    ): Promise<void> {
        return await this.client.request(deleteDirectusTranslationItem(key))
    }
}