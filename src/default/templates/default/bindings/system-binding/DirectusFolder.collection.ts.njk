import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import {
  Collections,
  Schema,
} from "../../client";
import { createDirectusFolderItem, createDirectusFolderItems, deleteDirectusFolderItem, deleteDirectusFolderItems, readDirectusFolderItem, readDirectusFolderItems, updateDirectusFolderItem, updateDirectusFolderItems } from "@/command/DirectusFolder.command";

type DirectusSDK = typeof DirectusSDK;

export class DirectusFolderItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    items: Partial<Collections.DirectusFolder>[],
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusFolder,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[]
  > {
    return (await this.client.request(
      createDirectusFolderItems(items, query as any),
    )) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusFolder,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[]
  > {
    return (await this.client.request(readDirectusFolderItems(query))) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusFolder,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    const items = await this.client.request(
      readDirectusFolderItems({
        ...query,
        limit: 1,
      }),
    );
    return items?.[0] as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Directus.DirectusFolder<Schema>
    >,
  >(
    keys: Collections.DirectusFolder extends { id: number | string }
      ? Collections.DirectusFolder["id"][]
      : string[] | number[],
    patch: Partial<Collections.DirectusFolder>,
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusFolder,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[]
  > {
    return (await this.client.request(
      updateDirectusFolderItems(keys, patch, query),
    )) as any; // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    keys: Collections.DirectusFolder extends { id: number | string }
      ? Collections.DirectusFolder["id"][]
      : string[] | number[],
  ): Promise<void> {
    return await this.client.request(deleteDirectusFolderItems(keys));
  }
}

export class DirectusFolderItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    item: Partial<Collections.DirectusFolder>,
    query?: Query,
  ): Promise<
    ApplyQueryFields<
      Schema,
      Collections.DirectusFolder,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >
  > {
    return (await this.client.request(
      createDirectusFolderItem(item, query as any),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    key: Collections.DirectusFolder extends { id: number | string }
      ? Collections.DirectusFolder["id"]
      : string | number,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusFolder,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      readDirectusFolderItem(key, query),
    )) as any;
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    key: Collections.DirectusFolder extends { id: number | string }
      ? Collections.DirectusFolder["id"]
      : string | number,
    patch: Partial<Collections.DirectusFolder>,
    query?: Query,
  ): Promise<
    | ApplyQueryFields<
        Schema,
        Collections.DirectusFolder,
        Query extends undefined
          ? ["*"]
          : Query["fields"] extends undefined
            ? ["*"]
            : Query["fields"] extends Readonly<any[]>
              ? Query["fields"]
              : ["*"]
      >
    | undefined
  > {
    return (await this.client.request(
      updateDirectusFolderItem(key, patch, query as any),
    )) as any;
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusFolder
    >,
  >(
    key: Collections.DirectusFolder extends { id: number | string }
      ? Collections.DirectusFolder["id"]
      : string | number,
  ): Promise<void> {
    return await this.client.request(deleteDirectusFolderItem(key));
  }
}
