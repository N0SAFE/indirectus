import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, Schema } from "../../client";

import { toSafe } from "../../utils";
import { createDirectusShareItem, createDirectusShareItems, deleteDirectusShareItem, deleteDirectusShareItems, readDirectusShareItem, readDirectusShareItems, updateDirectusShareItem, updateDirectusShareItems } from "../../command/DirectusShare.command";

export class DirectusShareItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Creates many items in the collection.
   */
  async create<
    const Query extends DirectusSDK.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    items: Partial<Collections.DirectusShare>[],
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusShare,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >[];
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(createDirectusShareItems(items, query as any))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true })); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusShare,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >[];
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(readDirectusShareItems(query))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true })); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    query?: Query,
  ): Promise<
    | {
        data:
          | ApplyQueryFields<
              Schema,
              Collections.DirectusShare,
              Query extends undefined
                ? ["*"]
                : Query["fields"] extends undefined
                  ? ["*"]
                  : Query["fields"] extends Readonly<any[]>
                    ? Query["fields"]
                    : ["*"]
            >
          | undefined;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(
        readDirectusShareItems({
          ...query,
          limit: 1,
        }),
      )
      .then((items) => ({ data: items?.[0], isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Directus.DirectusShare<Schema>
    >,
  >(
    keys: Collections.DirectusShare extends { id: number | string }
      ? Collections.DirectusShare["id"][]
      : string[] | number[],
    patch: Partial<Collections.DirectusShare>,
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusShare,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >[];
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(updateDirectusShareItems(keys, patch, query))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true })); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    keys: Collections.DirectusShare extends { id: number | string }
      ? Collections.DirectusShare["id"][]
      : string[] | number[],
  ): Promise<void> {
    return await this.client.request(deleteDirectusShareItems(keys));
  }
}

export class DirectusShareItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Create a single item in the collection.
   */
  async create<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    item: Partial<Collections.DirectusShare>,
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusShare,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(createDirectusShareItem(item, query as any))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    key: Collections.DirectusShare extends { id: number | string }
      ? Collections.DirectusShare["id"]
      : string | number,
    query?: Query,
  ): Promise<
    | {
        data:
          | ApplyQueryFields<
              Schema,
              Collections.DirectusShare,
              Query extends undefined
                ? ["*"]
                : Query["fields"] extends undefined
                  ? ["*"]
                  : Query["fields"] extends Readonly<any[]>
                    ? Query["fields"]
                    : ["*"]
            >
          | undefined;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(readDirectusShareItem(key, query))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    key: Collections.DirectusShare extends { id: number | string }
      ? Collections.DirectusShare["id"]
      : string | number,
    patch: Partial<Collections.DirectusShare>,
    query?: Query,
  ): Promise<
    | {
        data:
          | ApplyQueryFields<
              Schema,
              Collections.DirectusShare,
              Query extends undefined
                ? ["*"]
                : Query["fields"] extends undefined
                  ? ["*"]
                  : Query["fields"] extends Readonly<any[]>
                    ? Query["fields"]
                    : ["*"]
            >
          | undefined;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(updateDirectusShareItem(key, patch, query as any))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusShare
    >,
  >(
    key: Collections.DirectusShare extends { id: number | string }
      ? Collections.DirectusShare["id"]
      : string | number,
  ): Promise<void> {
    return await this.client.request(deleteDirectusShareItem(key));
  }
}
