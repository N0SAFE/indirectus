import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, CollectionsType, Schema } from "../../client";

import { toSafe } from "../../utils";

/**
 * Read many directus files items.
 */
export function readDirectusFileItems<
  const Query extends Directus.Query<CollectionsType, Collections.DirectusFile>,
>(query?: Query) {
  return DirectusSDK.readFiles<CollectionsType, Query>(query);
}

/**
 * Read many directus files items.
 */
export const listDirectusFile = readDirectusFileItems;

/**
 * Gets a single known directus files item by id.
 */
export function readDirectusFileItem<
  const Query extends Directus.Query<CollectionsType, Collections.DirectusFile>,
>(
  key: Collections.DirectusFile extends { id: number | string }
    ? Collections.DirectusFile["id"]
    : string | number,
  query?: Query,
) {
  return DirectusSDK.readFile<CollectionsType, Query>(key, query);
}

/**
 * Gets a single known directus files item by id.
 */
export const readDirectusFile = readDirectusFileItem;

/**
 * read file as array buffer
 */
export function readDirectusFileArrayBuffer(
    key: Collections.DirectusFile extends { id: number | string }
        ? Collections.DirectusFile['id']
        : string | number,
    query?: Directus.AssetsQuery
) {
    return DirectusSDK.readAssetArrayBuffer<CollectionsType>(key, query)
}

/**
 * read file as blob
 */
export function readDirectusFileBlob(
    key: Collections.DirectusFile extends { id: number | string }
        ? Collections.DirectusFile['id']
        : string | number,
    query?: Directus.AssetsQuery
) {
    return DirectusSDK.readAssetBlob<CollectionsType>(key, query)
}

/**
 * read file as readable stream
 */
export function readDirectusFileStream(
    key: Collections.DirectusFile extends { id: number | string }
        ? Collections.DirectusFile['id']
        : string | number,
    query?: Directus.AssetsQuery
) {
    return DirectusSDK.readAssetRaw<CollectionsType>(key, query)
}

/**
 * Read many directus files items.
 */
export function updateDirectusFileItems<
  const Query extends Directus.Query<CollectionsType, Collections.DirectusFile>,
>(
  keys: Collections.DirectusFile extends { id: number | string }
    ? Collections.DirectusFile["id"][]
    : string[] | number[],
  patch: Partial<Collections.DirectusFile>,
  query?: Query,
) {
  return DirectusSDK.updateFiles<CollectionsType, Query>(keys, patch, query);
}

export function updateBatchDirectusFileItems<
    const Query extends Directus.Query<
        CollectionsType,
        Collections.DirectusFile
    >,
>(items: Directus.NestedPartial<Collections.DirectusFile>[], query?: Query) {
    return DirectusSDK.updateFilesBatch<CollectionsType, Query>(items, query)
}

/**
 * Gets a single known directus files item by id.
 */
export function updateDirectusFileItem<
  const Query extends Directus.Query<CollectionsType, Collections.DirectusFile>,
>(
  key: Collections.DirectusFile extends { id: number | string }
    ? Collections.DirectusFile["id"]
    : string | number,
  patch: Partial<Collections.DirectusFile>,
  query?: Query,
) {
  return DirectusSDK.updateFile<CollectionsType, Query>(key, patch, query);
}

/**
 * Deletes many directus files items.
 */
export function deleteDirectusFileItems<
  const Query extends Directus.Query<CollectionsType, Collections.DirectusFile>,
>(
  keys: Collections.DirectusFile extends { id: number | string }
    ? Collections.DirectusFile["id"][]
    : string[] | number[],
) {
  return DirectusSDK.deleteFiles<CollectionsType>(keys);
}

/**
 * Deletes a single known directus files item by id.
 */
export function deleteDirectusFileItem(
  key: Collections.DirectusFile extends { id: number | string }
    ? Collections.DirectusFile["id"]
    : string | number,
) {
  return DirectusSDK.deleteFile<CollectionsType>(key);
}

export class DirectusFileItems {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}
  
  async create<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    items: (Partial<Collections.DirectusFile> & {file: File})[],
    query?: Query,
  ): Promise<
    {data: ApplyQueryFields<
      CollectionsType,
      Collections.DirectusFile,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >[], isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    const arraySymbol = Symbol('array');
    
    const formData = new FormData();
    const pathToFormDataPath = (path: (string | typeof arraySymbol)[]) => {
      const result: string[] = []
      const first = path.shift()
      path.forEach((part) => {
        if (part === arraySymbol) {
          result.push('[]');
        } else {
          result.push(`[${part}]`);
        }
      });
      if (first === arraySymbol) {
        return result.join('');
      }
      return first + result.join('');
    }
    const populateFormData = (item: object, path: (string | typeof arraySymbol)[] = []) => {
      Object.entries(item).forEach(([key, value]) => {
        if (value instanceof File) {
          formData.append(pathToFormDataPath([...path, key]), value);
        } else if (value instanceof Array) {
          value.forEach((item) => {
            if (item instanceof File) {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item);
            } else if (item instanceof Date) {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item.toISOString());
            } else if (item instanceof Object) {
              populateFormData(item, [...path, key, arraySymbol]);
            } else {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item);
            }
          });
        } else if (value instanceof Date) {
          formData.append(pathToFormDataPath([...path, key]), value.toISOString());
        } else if (value instanceof Object) {
          populateFormData(value, [...path, key]);
        } else {
          formData.append(pathToFormDataPath([...path, key]), value);
        }
      });
      return formData;
    }
    
    items.forEach((item) => {
      populateFormData(item);
    })
    
    return (await this.client.request(
      DirectusSDK.uploadFiles<CollectionsType, Query>(formData, query),
    )) as any;
  }

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    query?: Query,
  ): Promise<
  { data: ApplyQueryFields<
      CollectionsType,
      Collections.DirectusFile,
      Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
    >[], isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(readDirectusFileItems(query)).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true})); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    query?: Query,
  ): Promise<
    { data: ApplyQueryFields<
        CollectionsType,
        Collections.DirectusFile,
        Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
      >
    | undefined, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      readDirectusFileItems({
        ...query,
        limit: 1,
      }),
    ).then((items) => ({data: items?.[0], isError: false}) as any).catch((error) => ({error, isError: true}));
  }

  /**
   * Update many items in the collection.
   */
  async update<
    const Query extends Directus.Query<
      CollectionsType,
      Directus.DirectusFile<CollectionsType>
    >,
  >(
    keys: Collections.DirectusFile extends { id: number | string }
      ? Collections.DirectusFile["id"][]
      : string[] | number[],
    patch: Partial<Collections.DirectusFile>,
    query?: Query,
  ): Promise<
  { data: ApplyQueryFields<
      CollectionsType,
      Collections.DirectusFile,
      Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
    >[], isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      updateDirectusFileItems(keys, patch, query),
    ).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true})); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }
  
    /**
     * Update many items in the collection with batch.
     */
    async updateBatch<
        const Query extends Directus.Query<
            CollectionsType,
            Directus.DirectusFile<CollectionsType>
        >,
    >(
        items: Directus.NestedPartial<Collections.DirectusFile>[],
        query?: Query
    ): Promise<
      {data: 
        ApplyQueryFields<
            CollectionsType,
            Collections.DirectusFile,
            Query extends undefined
                ? ['*']
                : Query['fields'] extends undefined
                  ? ['*']
                  : Query['fields'] extends Readonly<any[]>
                    ? Query['fields']
                    : ['*']
        >[], isError: false, error: never } | {error: Error, isError: true, data: never}
    > {
        return (await toSafe(this.client.request(
            updateBatchDirectusFileItems(items, query)
        ))) as any // the any type is here because we transform the type through or custom ApplyQueryFields type.
    }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    keys: Collections.DirectusFile extends { id: number | string }
      ? Collections.DirectusFile["id"][]
      : string[] | number[],
  ): Promise<void> {
    return await this.client.request(deleteDirectusFileItems(keys));
  }
}

export class DirectusFileItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}
  
  async create<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    item: Partial<Collections.DirectusFile> & {file: File},
    query?: Query,
  ): Promise<
    {data: ApplyQueryFields<
      CollectionsType,
      Collections.DirectusFile,
      Query extends undefined
        ? ["*"]
        : Query["fields"] extends undefined
          ? ["*"]
          : Query["fields"] extends Readonly<any[]>
            ? Query["fields"]
            : ["*"]
    >, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    const arraySymbol = Symbol('array');
    
    const formData = new FormData();
    const pathToFormDataPath = (path: (string | typeof arraySymbol)[]) => {
      const result: string[] = []
      const first = path.shift()
      path.forEach((part) => {
        if (part === arraySymbol) {
          result.push('[]');
        } else {
          result.push(`[${part}]`);
        }
      });
      if (first === arraySymbol) {
        return result.join('');
      }
      return first + result.join('');
    }
    const populateFormData = (item: object, path: (string | typeof arraySymbol)[] = []) => {
      Object.entries(item).forEach(([key, value]) => {
        if (value instanceof File) {
          formData.append(pathToFormDataPath([...path, key]), value);
        } else if (value instanceof Array) {
          value.forEach((item) => {
            if (item instanceof File) {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item);
            } else if (item instanceof Date) {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item.toISOString());
            } else if (item instanceof Object) {
              populateFormData(item, [...path, key, arraySymbol]);
            } else {
              formData.append(pathToFormDataPath([...path, key, arraySymbol]), item);
            }
          });
        } else if (value instanceof Date) {
          formData.append(pathToFormDataPath([...path, key]), value.toISOString());
        } else if (value instanceof Object) {
          populateFormData(value, [...path, key]);
        } else {
          formData.append(pathToFormDataPath([...path, key]), value);
        }
      });
      return formData;
    }
    
    populateFormData(item);
    
    return (await this.client.request(
      DirectusSDK.uploadFiles<CollectionsType, Query>(formData, query),
    )) as any;
  }

  /**
   * Read a single item from the collection.
   */
  async get<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    key: Collections.DirectusFile extends { id: number | string }
      ? Collections.DirectusFile["id"]
      : string | number,
    query?: Query,
  ): Promise<
    { data: ApplyQueryFields<
        CollectionsType,
        Collections.DirectusFile,
        Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
      >
    | undefined, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(readDirectusFileItem(key, query)).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true}));
  }
  
    /**
     * read file as array buffer
     */
    async readArrayBuffer(
        key: Collections.DirectusFile extends { id: number | string }
            ? Collections.DirectusFile['id']
            : string | number,
        query?: Directus.AssetsQuery
    ) {
        return await toSafe(this.client.request(
            readDirectusFileArrayBuffer(key, query)
        ))
    }

    /**
     * read file as blob
     */
    async readBlob(
        key: Collections.DirectusFile extends { id: number | string }
            ? Collections.DirectusFile['id']
            : string | number,
        query?: Directus.AssetsQuery
    ) {
        return await toSafe(this.client.request(readDirectusFileBlob(key, query)))
    }

    /**
     * read file as readable stream
     */
    async readStream(
        key: Collections.DirectusFile extends { id: number | string }
            ? Collections.DirectusFile['id']
            : string | number,
        query?: Directus.AssetsQuery
    ) {
        return await toSafe(this.client.request(readDirectusFileStream(key, query)))
    }

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    key: Collections.DirectusFile extends { id: number | string }
      ? Collections.DirectusFile["id"]
      : string | number,
    patch: Partial<Collections.DirectusFile>,
    query?: Query,
  ): Promise<
    { data: ApplyQueryFields<
        CollectionsType,
        Collections.DirectusFile,
        Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
      >
    | undefined, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      updateDirectusFileItem(key, patch, query as any),
    ).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true}));
  }

  /**
   * Remove many items in the collection.
   */
  async remove<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusFile
    >,
  >(
    key: Collections.DirectusFile extends { id: number | string }
      ? Collections.DirectusFile["id"]
      : string | number,
  ): Promise<void> {
    return await this.client.request(deleteDirectusFileItem(key));
  }
}