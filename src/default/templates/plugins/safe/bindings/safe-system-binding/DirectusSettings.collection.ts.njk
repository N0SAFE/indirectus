import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, Schema } from "../../client";

import { toSafe } from "../../utils";
import { readDirectusSettings, updateDirectusSettings } from "../../command/DirectusSettings.command";

export class DirectusSettingsSingleton {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read the singleton from the collection.
   */
  async read<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusSettings
    >,
  >(
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusSettings,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(readDirectusSettings(query))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }

  /**
   * Update the singleton from the collection.
   */
  async update<
    const Query extends Directus.Query<
      Schema,
      Collections.DirectusSettings
    >,
  >(
    patch: Partial<Collections.DirectusSettings>,
    query?: Query,
  ): Promise<
    | {
        data: ApplyQueryFields<
          Schema,
          Collections.DirectusSettings,
          Query extends undefined
            ? ["*"]
            : Query["fields"] extends undefined
              ? ["*"]
              : Query["fields"] extends Readonly<any[]>
                ? Query["fields"]
                : ["*"]
        >;
        isError: false;
        error: never;
      }
    | { error: Error; isError: true; data: never }
  > {
    return this.client
      .request(updateDirectusSettings(patch, query))
      .then((data) => ({ data, isError: false }) as any)
      .catch((error) => ({ error, isError: true }));
  }
}
