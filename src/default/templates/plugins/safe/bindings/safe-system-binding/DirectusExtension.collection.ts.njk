import type * as Directus from "@directus/sdk";

import * as DirectusSDK from "@directus/sdk";

import { ApplyQueryFields } from "../../types/ApplyQueryFields";

import { Collections, CollectionsType, Schema } from "../../client";

import { toSafe } from "../../utils";

/**
 * Read many directus extensions items.
 */
export function readDirectusExtensionItems<
  const Query extends Directus.Query<
    CollectionsType,
    Collections.DirectusExtension
  >,
>(query?: Query) {
  return DirectusSDK.readExtensions<CollectionsType>();
}

/**
 * Read many directus extensions items.
 */
export const listDirectusExtension = readDirectusExtensionItems;

/**
 * Gets a single known directus extensions item by id.
 */
export function updateDirectusExtensionItem<
  const Query extends Directus.Query<
    CollectionsType,
    Collections.DirectusExtension
  >,
>(
  bundle: string | null,
  name: string,
  data: Directus.NestedPartial<Directus.DirectusExtension<CollectionsType>>,
) {
  return DirectusSDK.updateExtension<CollectionsType>(bundle, name, data);
}

export class DirectusExtensionItems
{
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Read many items from the collection.
   */
  async query<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusExtension
    >,
  >(
    query?: Query,
  ): Promise<
  { data: ApplyQueryFields<
      CollectionsType,
      Collections.DirectusExtension,
      Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
    >[], isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      readDirectusExtensionItems(query),
    ).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true})); // the any type is here because we transform the type through or custom ApplyQueryFields type.
  }

  /**
   * Read the first item from the collection matching the query.
   */
  async find<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusExtension
    >,
  >(
    query?: Query,
  ): Promise<
    { data: ApplyQueryFields<
        CollectionsType,
        Collections.DirectusExtension,
        Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
      >
    | undefined, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      readDirectusExtensionItems({
        ...query,
        limit: 1,
      }),
    ).then((items) => ({data: items?.[0], isError: false}) as any).catch((error) => ({error, isError: true}));
  }
}

export class DirectusExtensionItem {
  /**
   *
   */
  constructor(
    private client: Directus.DirectusClient<Schema> &
      Directus.RestClient<Schema>,
  ) {}

  /**
   * Update a single item from the collection.
   */
  async update<
    const Query extends Directus.Query<
      CollectionsType,
      Collections.DirectusExtension
    >,
  >(
    bundle: string | null,
    name: string,
    data: Directus.NestedPartial<Directus.DirectusExtension<CollectionsType>>,
  ): Promise<
    { data: ApplyQueryFields<
        CollectionsType,
        Collections.DirectusExtension,
        Query extends undefined ? ['*'] : Query['fields'] extends undefined ? ['*'] : Query['fields'] extends Readonly<any[]> ? Query['fields'] : ['*']
      >
    | undefined, isError: false, error: never} | {error: Error, isError: true, data: never}
  > {
    return this.client.request(
      updateDirectusExtensionItem(bundle, name, data),
    ).then((data) => ({data, isError: false}) as any).catch((error) => ({error, isError: true}));
  }
}